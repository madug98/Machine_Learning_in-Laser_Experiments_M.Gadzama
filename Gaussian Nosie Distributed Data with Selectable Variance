#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Nov 29 17:00:41 2020

@author: madugadzama
"""



''' This is the first set of 'fake' experimental data collected, it will be saved to 
the file 'L_exp_1.txt'. This will allow a set of experimental results to be produced
with gaussian noise added on, but the array produced is saved to another file. This 
means that everytime I open the file, it will havr the exact same experimental values
- as opposed to before where everytime I ran MLOOP it was regenerating different 
values due to the numpy.random function'''


'''Note that each time we run this, it will generate a new set of y_1 ...y_10 arrays. These can then be
used in another file and if I keep re-running that other file, the arrays won't change'''

'''This file has our ten experimental data sets recorded. If you re-run this, you will get a 
completely new set of data'''

''' It should be noted that the Poisson Distributed Noise Demonstration simulates experiment more accurately. Being able to choose you own variance
represents a slightly more contrived version of the experiment but is nonetheless a useful exercise.'''


import numpy as np
import matplotlib.pyplot as plt


def linewidth(x, s_bgd, s_0, x_0, d_x):
    return s_bgd + s_0/(1+4*((x-x_0)/d_x)**2)

# setting true paramter values
background = 2
s_0 = 8
x_0 = 50
d_x = 10

#setting the number of repeats for the obtaining of our 'experimental data' 
number_of_runs = 10

#setting the variance of noise
noise_variance= 9.2

# setting the x values and corresponding linewidth values
x = np.linspace(0,100,200)
y = linewidth(x,background,s_0,x_0,d_x)

y_1 = y + np.random.normal(0,noise_variance, size=(200)) 
y_2 = y + np.random.normal(0,noise_variance, size=(200)) 
y_3 = y + np.random.normal(0,noise_variance, size=(200)) 
y_4 = y + np.random.normal(0,noise_variance, size=(200)) 
y_5 = y + np.random.normal(0,noise_variance, size=(200)) 
y_6 = y + np.random.normal(0,noise_variance, size=(200)) 
y_7 = y + np.random.normal(0,noise_variance, size=(200)) 
y_8 = y + np.random.normal(0,noise_variance, size=(200)) 
y_9 = y + np.random.normal(0,noise_variance, size=(200)) 
y_10 = y + np.random.normal(0,noise_variance, size=(200)) 



np.savetxt('exp_1_var_9.2.txt', y_1, fmt='%1.8f')
#b = np.loadtxt('2test1.txt', dtype=float)

y_2 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_2_var_9.2.txt', y_2, fmt='%1.8f')

y_3 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_3_var_9.2.txt', y_3, fmt='%1.8f')

y_4 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_4_var_9.2.txt',y_4, fmt='%1.8f')

y_5 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_5_var_9.2.txt', y_5, fmt='%1.8f')

y_6 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_6_var_9.2.txt', y_6, fmt='%1.8f')

y_7 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_7_var_9.2.txt', y_7, fmt='%1.8f')

y_8 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_8_var_9.2.txt', y_8, fmt='%1.8f')

y_9 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_9_var_9.2.txt', y_9, fmt='%1.8f')

y_10 = y + np.random.normal(0,noise_variance, size=(200)) 
np.savetxt('exp_10_var_9.2.txt', y_10, fmt='%1.8f')
