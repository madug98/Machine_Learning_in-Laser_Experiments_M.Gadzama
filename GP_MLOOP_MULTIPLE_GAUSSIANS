#Imports for python 2 compatibility
from __future__ import absolute_import, division, print_function
__metaclass__ = type


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 23 13:12:46 2020

@author: madugadzama
"""

''' USING MLOOP to test time from 1 parameter to 9 parameters'''



#Imports for M-LOOP
import mloop.interfaces as mli
import mloop.controllers as mlc
import mloop.visualizations as mlv

#Other imports
import numpy as np
import time

import matplotlib.pyplot as plt
from timeit import default_timer as timer



'''Double Gaussian'''

t1_start = time.process_time()

def _3gaussian(x, amp_ex1,cen_ex1,sigma_ex1, amp_ex2, cen_ex2, sigma_ex2, amp_ex3, cen_ex3, sigma_ex3):
    
    return (amp_ex1*(1/(sigma_ex1*(np.sqrt(2*np.pi))))*(np.exp((-1.0/2.0)*(((x-cen_ex1)/sigma_ex1)**2)))
+amp_ex2*(1/(sigma_ex2*(np.sqrt(2*np.pi))))*(np.exp((-1.0/2.0)*(((x-cen_ex2)/sigma_ex2)**2)))+ 
amp_ex3*(1/(sigma_ex3*(np.sqrt(2*np.pi))))*(np.exp((-1.0/2.0)*(((x-cen_ex3)/sigma_ex3)**2))))

def least_squares_fitting(x, amp_target1,cen_target1,sigma_target1,  amp_target2,cen_target2,sigma_target2, amp_target3, cen_target3, sigma_target3):
    lstsqr = np.sum((y_array - _3gaussian(x,amp_target1,cen_target1,sigma_target1,amp_target2,cen_target2,sigma_target2, amp_target3, cen_target3, sigma_target3 ))**2)
    return lstsqr


x_array = np.linspace(1,100,100)
y_array = _3gaussian(x_array, 100,20,10,50,40,5,90,60,12)
#y_noise = 0.3*(np.random.ranf(50))
#y_array += y_noise




plt.plot(x_array, y_array, '.', color = 'red')
#plt.plot(x_array, _1gaussian(x_array, 108.64306123, 50.2446666, 9.92445594))
plt.xlabel('x data points')
plt.ylabel('y data points')
plt.title('Overlapping Gaussians')
plt.show()


#Declare your custom class that inherets from the Interface class
class CustomInterface(mli.Interface):
    
    #Initialization of the interface, including this method is optional
    def __init__(self):
        #You must include the super command to call the parent class, Interface, constructor 
        super(CustomInterface,self).__init__()
        
        #Attributes of the interface can be added here
        #If you want to precalculate any variables etc. this is the place to do it
        #In this example we will just define the location of the minimum
        #self.minimum_params = np.array([0,0.1,-0.1])
        
    #You must include the get_next_cost_dict method in your class
    #this method is called whenever M-LOOP wants to run an experiment
    def get_next_cost_dict(self,params_dict):
        
        #Get parameters from the provided dictionary
        params = params_dict['params']
        
        #Here you can include the code to run your experiment given a particular set of parameters
        #In this example we will just evaluate a sum of sinc functions
        cost = (np.sum(least_squares_fitting(x_array,params[0],params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8])))
        #There is no uncertainty in our result
        uncer = 0
        #The evaluation will always be a success
        bad = False
        #Add a small time delay to mimic a real experiment
        
        
        #The cost, uncertainty and bad boolean must all be returned as a dictionary
        #You can include other variables you want to record as well if you want
        cost_dict = {'cost':cost, 'uncer':uncer, 'bad':bad}
        return cost_dict
    


def main():
    #M-LOOP can be run with three commands
    
    #First create your interface
    interface = CustomInterface()
    #Next create the controller. Provide it with your interface and any options you want to set
    controller = mlc.create_controller(interface, 
                                      max_num_runs = 1000,
                                       target_cost = 0.1,
                                       num_params = 9, 
                                       min_boundary = [95,15,5,45,35,0, 85,55,7  ],
                                       max_boundary = [105,25,15,55,45,10, 95,65,17])
    #To run M-LOOP and find the optimal parameters just use the controller method optimize
    controller.optimize()
   
    #The results of the optimization will be saved to files and can also be accessed as attributes of the controller.
    print('Best parameters found:')
    print(controller.best_params)
    
    #You can also run the default sets of visualizations for the controller with one command
    mlv.show_all_default_visualizations(controller)
  
   

#Ensures main is run when this code is run as a script
if __name__ == '__main__':
    main()
 
t1_stop= time.process_time()

print('time taken is:', t1_stop-t1_start)
