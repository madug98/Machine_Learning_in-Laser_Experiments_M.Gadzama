#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec  7 10:23:21 2020

@author: madugadzama
"""

'''Week 10 Poisson distributer'''




''' This code demonstrates the poisson distribution and its nature. It is being
used to motivate this idea of measuring over a period of time. We can see that 
as the time increases, the curve becomes more like a Gaussian. What this means 
for the Lorentzian is that the SNR will decrease with time, which is natural in 
an experiment. The next step is to then begin using MLOOP. We can compare the time 
and MLOOP aspect and try and strike a balance. We could compare MLOOP or other machine learning teachniques with traditional
non-mahcine learning methods of guessing the curve. If the machine learning is very good with high noise,
then what is means is that potentially you can run the experiment for a much shorter time, and 
still obtain just as good or if not better result than with traditional methods. If we can show this, it 
then motivates the need for machine learning as it will save time and therefore money. '''

# for s_bgd
import numpy as np 
import matplotlib.pyplot as plt
import math
import collections

    
rate=2
time = 1

a = np.random.poisson(rate*time,1000) #selected 100 values
#print(a)

b= collections.Counter(a) #this retrieves the count of each element, dictionary




#Here, we have found the probabilities. we first had to select the frequencies of occurance values
#from the counter dictionary, then we just made a new array which contained the relative 
#frequencies of  each value. 
unpacked_list = [*b.values()]
probability = np.array(unpacked_list)/sum(unpacked_list)
#print(probability, sum(unpacked_list))



plt.bar(b.keys(), probability) # this will plot the actual values obtained and the frequencies as a bar plot.
                                #... essentially just plots the LHS of the counter dict on the x and the RHS
                                #of the counter dict on the y. 
